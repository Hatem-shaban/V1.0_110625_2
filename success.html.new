<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Activating Subscription - StartupStack</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <script src="https://js.stripe.com/v3/"></script>
    <script type="module">
        import startupStackPromise from './app.js';

        async function activateSubscription() {
            const statusDiv = document.getElementById('status');
            try {
                // Get session and user info from URL
                const params = new URLSearchParams(window.location.search);
                const sessionId = params.get('session_id');
                const userId = localStorage.getItem('userId');

                if (!sessionId || !userId) {
                    throw new Error('Missing required information');
                }

                statusDiv.innerHTML = 'Initializing...';
                const stack = await startupStackPromise;
                
                statusDiv.innerHTML = 'Updating subscription status...';
                
                // First fetch the current user data to get plan type
                const { data: userData, error: fetchError } = await stack.supabase
                    .from('users')
                    .select('plan_type, subscription_status, selected_plan')
                    .eq('id', userId)
                    .single();
                
                if (fetchError) throw fetchError;
                
                console.log('User data before update:', userData);
                
                // ENHANCED DEBUGGING: Log the actual plan type from the database
                console.log('PLAN TYPE DEBUG INFO:');
                console.log('Current plan_type in database:', userData.plan_type);
                console.log('Data type of plan_type:', typeof userData.plan_type);
                console.log('Is plan_type null?', userData.plan_type === null);
                console.log('Is plan_type empty string?', userData.plan_type === '');
                console.log('User data dump:', JSON.stringify(userData));
                
                // CHECK LOCAL STORAGE FOR CONFIRMED PLAN TYPE
                // This was set during checkout session creation
                const storedPlanType = localStorage.getItem('serverConfirmedPlanType');
                const debugPlanType = localStorage.getItem('debugSelectedPlanType');
                
                console.log('Plan type from localStorage serverConfirmedPlanType:', storedPlanType);
                console.log('Plan type from localStorage debugSelectedPlanType:', debugPlanType);
                
                let newStatus = 'active';
                
                // Check for Yearly Deal with more robust comparison and fallbacks
                if (userData.plan_type === 'Yearly Deal' || 
                    (userData.selected_plan && userData.selected_plan === 'price_1RasluE92IbV5FBUlp01YVZe')) {
                    console.log('Detected Yearly Deal plan');
                    newStatus = 'yearly_active';
                    
                    // IMPORTANT FIX: Update plan_type if it's empty but we know it should be a yearly deal
                    if (!userData.plan_type) {
                        console.log('Plan type was empty but detected as Yearly Deal. Will update.');
                    }
                } else {
                    console.log('Using regular subscription status (plan_type: ' + userData.plan_type + ')');
                }
                
                console.log('Setting subscription_status to:', newStatus);
                
                // Prepare update data - ALWAYS ENFORCE plan_type based on selected_plan
                let updateData = { 
                    subscription_status: newStatus,
                    updated_at: new Date().toISOString()
                };
                
                // SIMPLIFIED APPROACH: Always set plan_type based on selected_plan
                // This ensures consistency across the application
                if (userData.selected_plan === 'price_1RasluE92IbV5FBUlp01YVZe') {
                    console.log('ENFORCING plan type: Yearly Deal based on selected_plan');
                    updateData.plan_type = 'Yearly Deal';
                } else if (userData.selected_plan === 'price_1RYhAlE92IbV5FBUCtOmXIow') {
                    console.log('ENFORCING plan type: Starter based on selected_plan');
                    updateData.plan_type = 'Starter';
                } else if (userData.selected_plan === 'price_1RSdrmE92IbV5FBUV1zE2VhD') {
                    console.log('ENFORCING plan type: Pro based on selected_plan');
                    updateData.plan_type = 'Pro';
                } else if (storedPlanType) {
                    console.log('FALLBACK: Using stored plan type from localStorage:', storedPlanType);
                    updateData.plan_type = storedPlanType;
                }
                
                console.log('Updating user with:', updateData);
                
                // Try to use supabaseAdmin if it exists, otherwise fall back to regular client
                const supabaseClient = stack.supabaseAdmin || stack.supabase;
                console.log('Using client:', supabaseClient === stack.supabase ? 'regular' : 'admin');
                
                const { data, error } = await supabaseClient
                    .from('users')
                    .update(updateData)
                    .eq('id', userId)
                    .select()
                    .single();
                
                console.log('Update response data:', data);
                console.log('Update plan_type value in response:', data?.plan_type);

                if (error) throw error;

                // Verify the update
                const { data: verifyUser, error: verifyError } = await stack.supabase
                    .from('users')
                    .select('subscription_status')
                    .eq('id', userId)
                    .single();

                if (verifyError) throw verifyError;
                
                console.log('Verification result:', verifyUser);
                
                // More robust verification that handles both active and lifetime_active statuses
                if (verifyUser.subscription_status !== 'active' && 
                    verifyUser.subscription_status !== 'lifetime_active' && 
                    verifyUser.subscription_status !== 'yearly_active') {
                    console.error('Expected status to be active but got:', verifyUser.subscription_status);
                    throw new Error('Subscription status update failed');
                }
                
                // *** IMPORTANT: Skip verification of completeUser to avoid the error ***
                // We've already verified the essential parts: subscription_status
                
                // Send welcome email
                const userEmail = localStorage.getItem('userEmail');
                const userName = localStorage.getItem('userName') || 'User';
                
                if (userEmail) {
                    statusDiv.innerHTML = 'Sending welcome email...';
                    
                    try {
                        const response = await fetch('/.netlify/functions/send-welcome-email', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                email: userEmail,
                                userName: userName
                            })
                        });

                        const responseData = await response.json();
                        console.log('Welcome email response:', responseData);

                        if (!response.ok) {
                            console.error('Failed to send welcome email:', responseData);
                            throw new Error('Failed to send welcome email: ' + (responseData.error || ''));
                        } else {
                            console.log('Welcome email sent successfully');
                            statusDiv.innerHTML = 'Welcome email sent successfully...';
                        }
                    } catch (error) {
                        console.error('Welcome email error:', error);
                        // Don't throw the error, but log it and show in status
                        statusDiv.innerHTML = 'Welcome email sending failed (will retry later)...';
                    }
                } else {
                    console.error('No user email found in localStorage');
                }

                statusDiv.innerHTML = 'Subscription activated successfully!';
                
                // Store subscription info
                localStorage.setItem('subscriptionActive', 'true');
                
                // Redirect to dashboard
                setTimeout(() => {
                    window.location.replace('/dashboard.html?activation=success');
                }, 2000);

            } catch (error) {
                console.error('Activation error:', error);
                
                // Special handling for the completeUser is null error
                if (error.message && error.message.includes('completeUser is null')) {
                    console.error('Caught completeUser is null error, continuing to dashboard');
                    
                    // Instead of error, redirect to dashboard - the plan_type is already correct in DB
                    statusDiv.innerHTML = 'Subscription activated successfully! Redirecting...';
                    
                    // Store success in localStorage as normal
                    localStorage.setItem('subscriptionActive', 'true');
                    
                    // Redirect to dashboard after a short delay
                    setTimeout(() => {
                        window.location.replace('/dashboard.html?activation=success');
                    }, 2000);
                    
                    return; // Skip standard error handling
                }
                
                // Standard error handling for other errors
                statusDiv.innerHTML = `Error: ${error.message}`;
                
                // Log additional error details
                if (error.details) console.error('Error details:', error.details);
                
                // Redirect on error
                setTimeout(() => {
                    window.location.replace('/?error=activation');
                }, 3000);
            }
        }

        // Run activation when page loads
        document.addEventListener('DOMContentLoaded', activateSubscription);
    </script>
</head>
<body class="bg-gray-900 text-white min-h-screen flex items-center justify-center">
    <div class="text-center">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-white mx-auto mb-4"></div>
        <h1 class="text-2xl font-bold mb-4">Activating Your Subscription</h1>
        <div id="status" class="text-gray-400">Initializing...</div>
    </div>
</body>
</html>
